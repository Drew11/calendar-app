{"version":3,"sources":["components/Day.js","components/Week.js","App.js","serviceWorker.js","index.js"],"names":["Day","_ref","_this","onDayClick","today","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setEditingStatus","setState","editing","checkToday","_this$props","props","index","firstDayNumber","state","getDate","checkDays","_this$props2","daysInMonth","countWeek","firstDay","dayOnClick","_this2","id","require","generate","react_default","a","createElement","className","onClick","React","Component","Week","dayNames","days","map","dayName","components_Day","day","App","getFirstDayMouth","_this$state","year","month","Date","getFirstDayNumber","_this$state2","getDay","getDaysInMonth","_this$state3","createWeek","mappingEl","week","Math","ceil","push","components_Week","component","console","log","now","getFullYear","getMonth","monthNames","slice","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAuEeA,cAnEX,SAAAA,EAAAC,GACwB,IAAAC,EADXC,EACWF,EADXE,WACGC,EAAQH,EAARG,MAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAP,IACpBE,EAAAG,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAL,GAAAU,KAAAH,QAQJI,iBAAmB,WACfT,EAAKU,SAAS,CAACC,SAAS,KAVJX,EAaxBY,WAAa,WAAK,IAAAC,EACiBb,EAAKc,MAA/BC,EADSF,EACTE,MAAOC,EADEH,EACFG,eACZ,GAAGhB,EAAKiB,MAAMf,MAAMgB,YAAYH,EAAMC,EAAe,EACjD,MAAO,SAhBShB,EAoBvBmB,UAAY,WAAK,IAAAC,EAEiDpB,EAAKc,MAAhEC,EAFUK,EAEVL,MAAOM,EAFGD,EAEHC,YAAaL,EAFVI,EAEUJ,eAAgBM,EAF1BF,EAE0BE,UAAWC,EAFrCH,EAEqCG,SAEnD,OAAGR,EAAMM,EAAYL,EAAe,EACzB,KAEK,IAAbM,GAAkBP,IAAQC,EACnBO,EAEM,IAAbD,GAAkBP,EAAMC,EAChBO,EAAS,GACdR,IAES,IAAZO,EACQP,EAAMC,OADjB,IAhCAhB,EAAKiB,MAAM,CACPf,MAAOA,EACPS,SAAS,GAGbX,EAAKwB,WAAYvB,EAPGD,wEAuChB,IAAAyB,EAAApB,KAEEqB,EADeC,EAAQ,IACLC,SAAS,GAGjC,OAEGvB,KAAKY,MAAMN,QAMLkB,EAAAC,EAAAC,cAAA,OAAKL,GAAIA,GAAKA,GANCG,EAAAC,EAAAC,cAAA,MAAIL,GAAIA,EAC3BM,UAAW3B,KAAKO,aAChBqB,QAAS,kBAAIR,EAAKhB,iBAAiBiB,KAE/BrB,KAAKc,oBArDJe,IAAMC,WCgCTC,MA9Bf,SAAArC,GAQiB,IAPFuB,EAOEvB,EAPFuB,UACAC,EAMExB,EANFwB,SACAP,EAKEjB,EALFiB,eACAqB,EAIEtC,EAJFsC,SACApC,EAGEF,EAHFE,WACAoB,EAEEtB,EAFFsB,YACAnB,EACEH,EADFG,MAILoC,EAAOD,EAASE,IAAI,SAACC,EAASzB,GAChC,OAAOc,EAAAC,EAAAC,cAACU,EAAD,CAAK1B,MAAQA,EAAQ,EAAkB,EAAZO,EACtBpB,MAAOA,EACPoB,UAAWA,EACXkB,QAASA,EACTE,IAAK3B,EAAM,EACXQ,SAAUA,EACVP,eAAgBA,EAChBf,WAAcA,EACdoB,YAAeA,MAI/B,OAAOQ,EAAAC,EAAAC,cAAA,UACFO,ICsGMK,sBA3Hb,SAAAA,IAAa,IAAA3C,EAAAG,OAAAC,EAAA,EAAAD,CAAAE,KAAAsC,IACX3C,EAAAG,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwC,GAAAnC,KAAAH,QAgCDuC,iBAAmB,WAAK,IAAAC,EACC7C,EAAKiB,MAApB6B,EADcD,EACdC,KAAMC,EADQF,EACRE,MACb,OAAO,IAAIC,KAAKF,EAAMC,EAAQ,GAAG7B,WAnCxBlB,EAsCXiD,kBAAoB,WAAM,IAAAC,EACDlD,EAAKiB,MAApB6B,EADgBI,EAChBJ,KAAMC,EADUG,EACVH,MACb,OAAO,IAAIC,KAAKF,EAAMC,EAAQ,GAAGI,UAxCzBnD,EA2CXoD,eAAiB,WAAM,IAAAC,EACGrD,EAAKiB,MAApB6B,EADYO,EACZP,KAAMC,EADMM,EACNN,MACb,OAAO,IAAIC,KAAKF,EAAMC,EAAM,EAAG,GAAG7B,WA7C3BlB,EAgDXsD,WAAa,WACT,IAAM/B,EAAWvB,EAAK4C,mBAChB5B,EAAkBhB,EAAKiD,oBACvB5B,EAAcrB,EAAKoD,iBAEnBG,EAAY,GACdjC,EAAY,EACZkC,EAAOC,KAAKC,KAAKrC,EAAY,GAOjC,KALoB,KAAhBA,GAAsBL,EAAe,GACpCK,EAAY,IAAML,EAAe,IAClCwC,IAGGA,IAAOlC,GACViC,EAAUI,KAAK9B,EAAAC,EAAAC,cAAC6B,EAAD,CACX1D,MAASF,EAAKiB,MAAMf,MACpBoB,UAAaA,EACbC,SAAWA,EACXP,eAAkBA,EAClBK,YAAaA,EACbgB,SAAUrC,EAAKiB,MAAMoB,SACrBpC,WAAYD,EAAKC,cAErBqB,IAEH,OAAOiC,EAAUhB,IAAI,SAACsB,GAAD,OAAaA,KA1E5B7D,EA6EXC,WAAa,SAACyB,GACZoC,QAAQC,IAAIrC,IA3Ed,IAAMsC,EAAM,IAAIhB,KAHL,OAIXhD,EAAKiB,MAAQ,CACT6B,KAAMkB,EAAIC,cACVlB,MAAOiB,EAAIE,WACXhE,MAAO,IAAI8C,KAAKgB,EAAIC,cAAeD,EAAIE,WAAYF,EAAI9C,WACvDmB,SAAU,CACN,SACA,UACA,YACA,WACA,SACA,WACA,UAEJ8B,WAAY,CACR,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,aA7BGnE,wEAiFH,IAAAyB,EAAApB,KACN,OACIwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,oBAEZH,EAAAC,EAAAC,cAAA,UACGE,QAAS,WACiB,IAAnBR,EAAKR,MAAM8B,OAGdtB,EAAKf,SAAS,CAACqC,MAAMtB,EAAKR,MAAM8B,MAAM,MAE3C,KAEFlB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBACXH,EAAAC,EAAAC,cAAA,YAAO1B,KAAKY,MAAM6B,MAClBjB,EAAAC,EAAAC,cAAA,YAAO1B,KAAKY,MAAMkD,WAAW9D,KAAKY,MAAM8B,SAG7ClB,EAAAC,EAAAC,cAAA,UACIE,QAAS,WACiB,KAAnBR,EAAKR,MAAM8B,OAGdtB,EAAKf,SAAS,CAACqC,MAAMtB,EAAKR,MAAM8B,MAAM,MAE5C,MAELlB,EAAAC,EAAAC,cAAA,SAAOC,UAAW,kBACdH,EAAAC,EAAAC,cAAA,UACK1B,KAAKY,MAAMoB,SAASE,IAAI,SAACC,GAAD,OAAWX,EAAAC,EAAAC,cAAA,UAAKS,EAAQ4B,MAAM,EAAG,OAG9D/D,KAAKiD,uBArHTpB,IAAMC,YCMJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f99dbcb3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Day extends React.Component {\r\n\r\n    constructor({onDayClick,\r\n                    today}) {\r\n        super();\r\n        this.state={\r\n            today: today,\r\n            editing: false\r\n        }\r\n\r\n        this.dayOnClick =onDayClick;\r\n    }\r\n    setEditingStatus = ()=> {\r\n        this.setState({editing: true});\r\n    };\r\n\r\n    checkToday = ()=> {\r\n        let {index, firstDayNumber,} = this.props;\r\n        if(this.state.today.getDate()===index-firstDayNumber+1){\r\n            return \"today\";\r\n        }\r\n    };\r\n\r\n     checkDays = ()=> {\r\n\r\n       let {index, daysInMonth, firstDayNumber, countWeek, firstDay} = this.props;\r\n\r\n        if(index>daysInMonth+firstDayNumber-1){\r\n            return null;\r\n        }\r\n        if(countWeek ===0 && index===firstDayNumber){\r\n           return firstDay;\r\n        }\r\n        if(countWeek ===0 && index>firstDayNumber){\r\n            return firstDay+1\r\n        }else index++;\r\n\r\n        if(countWeek!==0){\r\n            return index-firstDayNumber;\r\n        }\r\n    };\r\n\r\n    render(){\r\n        const randomstring = require(\"randomstring\"),\r\n              id = randomstring.generate(4);\r\n\r\n\r\n        return(\r\n\r\n          !this.state.editing ? <td id={id}\r\n             className={this.checkToday()}\r\n             onClick={()=>this.setEditingStatus(id)}\r\n            >\r\n                {this.checkDays()}\r\n\r\n          </td>: <div id={id}>{id}</div> )\r\n}\r\n\r\n}\r\n\r\n\r\n//\r\n\r\n//     const randomstring = require(\"randomstring\");\r\n//     const id = randomstring.generate(4);\r\n//\r\n\r\n// }\r\n\r\nexport default Day;","import React from 'react';\r\nimport Day from './Day';\r\n\r\n\r\nfunction Week({\r\n               countWeek,\r\n               firstDay,\r\n               firstDayNumber,\r\n               dayNames,\r\n               onDayClick,\r\n               daysInMonth,\r\n               today}\r\n               ) {\r\n\r\n\r\n    const days = dayNames.map((dayName, index)=>{\r\n        return <Day index={(index + 1) + (countWeek * 7)}\r\n                    today={today}\r\n                    countWeek={countWeek}\r\n                    dayName={dayName}\r\n                    day={index+1}\r\n                    firstDay={firstDay}\r\n                    firstDayNumber={firstDayNumber}\r\n                    onDayClick = {onDayClick}\r\n                    daysInMonth = {daysInMonth}\r\n                />\r\n    });\r\n\r\n    return <tr>\r\n        {days}\r\n    </tr>\r\n\r\n}\r\n\r\nexport default Week;\r\n","import React from 'react';\nimport Week from './components/Week';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n\n    const now = new Date();\n    this.state = {\n        year: now.getFullYear(),\n        month: now.getMonth(),\n        today: new Date(now.getFullYear(), now.getMonth(), now.getDate()),\n        dayNames: [\n            'Monday',\n            'Tuesday',\n            'Wednesday',\n            'Thursday',\n            'Friday',\n            'Saturday',\n            'Sunday',\n       ],\n        monthNames: [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\" ]\n    }\n  }\n\n   getFirstDayMouth = () =>{\n      const {year, month} = this.state;\n      return new Date(year, month , 1).getDate();\n\n    };\n    getFirstDayNumber = () => {\n       const {year, month} = this.state;\n       return new Date(year, month , 1).getDay();\n   };\n\n    getDaysInMonth = () => {\n        const {year, month} = this.state;\n        return new Date(year, month+1, 0).getDate();\n    };\n\n    createWeek = () => {\n        const firstDay = this.getFirstDayMouth(), //1\n              firstDayNumber =  this.getFirstDayNumber(), //6\n              daysInMonth = this.getDaysInMonth(); //30\n\n        const mappingEl = [];\n        let countWeek = 0;\n        let week = Math.ceil(daysInMonth/7);\n\n        if((daysInMonth === 31 && firstDayNumber>5)  ||\n            (daysInMonth>30 && firstDayNumber>6)){\n            week++;\n        }\n\n        while (week!==countWeek){\n            mappingEl.push(<Week\n                today = {this.state.today}\n                countWeek = {countWeek}\n                firstDay ={firstDay}\n                firstDayNumber = {firstDayNumber}\n                daysInMonth={daysInMonth}\n                dayNames={this.state.dayNames}\n                onDayClick={this.onDayClick}\n            />);\n            countWeek++;\n        }\n         return mappingEl.map((component)=>component);\n    };\n\n    onDayClick = (id)=> {\n      console.log(id)\n    };\n\n    render(){\n      return (\n          <div className=\"calendar-app\">\n              <header className=\"App-header\">\n                 <div className={\"calendar-caption\"}>\n\n                     <button\n                        onClick={()=>{\n                            if(this.state.month===0){\n                                return;\n                            }\n                            this.setState({month:this.state.month-1})\n                        }}\n                     >{'<'}</button>\n\n                     <div className={\"calendar-head\"}>\n                          <span>{this.state.year}</span>\n                          <span>{this.state.monthNames[this.state.month]}</span>\n                     </div>\n\n                     <button\n                         onClick={()=>{\n                             if(this.state.month===11){\n                                 return;\n                             }\n                             this.setState({month:this.state.month+1})\n                         }}\n                     >{'>'}</button>\n                 </div>\n                  <table className={\"calendar-board\"}>\n                      <tr>\n                          {this.state.dayNames.map((dayName)=><th>{dayName.slice(0, 3)}</th>)}\n                      </tr>\n\n                    { this.createWeek() }\n                </table>\n              </header>\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}