{"version":3,"sources":["components/utils/utils.js","components/Day.js","components/Week.js","App.js","serviceWorker.js","index.js"],"names":["utils","checkDays","props","dayIndex","daysInMonth","firstDayNumber","countWeek","Day","_ref","onDayClick","today","thisMonth","_this","month","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleModal","setState","prevState","modal","addComment","event","target","value","comment","saveComment","state","haveComment","cancelledComment","_this$props","daysState","day","filter","setClassToday","_this$props2","getDate","id","editing","close","prevProps","saveDaysState","_this$props3","targetMonth","updateDays","console","log","_this2","react_default","a","createElement","Math","random","className","onClick","Modal","isOpen","toggle","ModalHeader","placeholder","onChange","ModalFooter","Button","color","React","Component","Week","firstDay","dayNames","days","map","dayName","index","components_Day","App","currentMonthDays","copyDays","toConsumableArray","some","obj","push","objectSpread","getFirstDayMouth","_this$state","year","Date","getFirstDayNumber","_this$state2","getDay","getDaysInMonth","_this$state3","createWeek","mappingEl","week","ceil","components_Week","component","now","getFullYear","getMonth","monthNames","slice","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23e18d55.chunk.js","sourcesContent":["const utils = {\r\n   checkDays\r\n};\r\n\r\n//\r\n// function getModile(modal, toggle,) {\r\n//     return <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n//         <ModalHeader toggle={this.toggle} >Modal title</ModalHeader>\r\n//\r\n//         <textarea placeholder={'type something'}\r\n//                   value={this.state.comment}\r\n//                   onChange={event=>this.addComment(event)}\r\n//         >{this.state.comment}\r\n//                                         </textarea>\r\n//\r\n//         <ModalFooter>\r\n//             <Button  color=\"primary\" onClick={()=>this.saveComment()}> Save</Button>{' '}\r\n//             <Button  color=\"secondary\" onClick={this.cancelledComment}>Cancel</Button>\r\n//         </ModalFooter>\r\n//     </Modal>\r\n// }\r\n\r\nfunction checkDays(props) {\r\n     let {dayIndex, daysInMonth, firstDayNumber, countWeek} = props;\r\n\r\n     if(dayIndex>daysInMonth+firstDayNumber-1){\r\n         return null;\r\n     }\r\n     if(countWeek===0 && dayIndex===firstDayNumber){\r\n         return dayIndex-firstDayNumber+1;\r\n     }\r\n\r\n     if(countWeek===0 && dayIndex>firstDayNumber){\r\n         return dayIndex-firstDayNumber+1;\r\n     }\r\n     if(countWeek!==0){\r\n         dayIndex ++;\r\n         return dayIndex-firstDayNumber;\r\n     }\r\n}\r\n\r\n\r\nexport default utils;","import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalFooter } from 'reactstrap';\r\nimport utils from './utils/utils'\r\n\r\nclass Day extends React.Component {\r\n\r\n    constructor({onDayClick,\r\n                    today,\r\n                    thisMonth,\r\n                    firstDayNumber,\r\n                    dayIndex,\r\n                    daysInMonth,\r\n                    month\r\n                }) {\r\n        super();\r\n        this.state = {\r\n            month: month,\r\n            id: dayIndex,\r\n            haveComment: false,\r\n            editing: false,\r\n            comment: null,\r\n            modal: false,\r\n            close: false,\r\n        };\r\n    }\r\n\r\n\r\n    toggleModal = () => {\r\n            this.setState(prevState=>({modal: !prevState.modal}))\r\n    };\r\n\r\n\r\n\r\n    addComment = (event) => {\r\n        event.target.value===''?\r\n            this.setState( {comment: null,} ):\r\n            this.setState( {comment: event.target.value} );\r\n    };\r\n\r\n    saveComment = () => {\r\n        if(this.state.comment) {\r\n            this.setState({\r\n                haveComment: true,\r\n            });\r\n        }\r\n\r\n        this.toggleModal();\r\n    };\r\n\r\n    cancelledComment = () => {\r\n        const{dayIndex , daysState, month } = this.props,\r\n             targetDay = daysState\r\n            .filter((day)=>(day['month'] === month) && (day['id'] === dayIndex)),\r\n             day = targetDay[0];\r\n\r\n        let comment;\r\n        day ? comment = day['comment']: comment = this.state.comment;\r\n\r\n       this.setState({\r\n        haveComment: false,\r\n        comment: comment,\r\n        });\r\n\r\n        this.toggleModal();\r\n    };\r\n\r\n    setClassToday = ()=> {\r\n        let {dayIndex, firstDayNumber, today} = this.props;\r\n\r\n        if(today.getDate()===dayIndex-firstDayNumber+1){\r\n            return \"today\";\r\n        }\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n        if(this.state.haveComment !== prevState.haveComment){\r\n            this.props.saveDaysState(this.state);\r\n        }\r\n\r\n        const{dayIndex , daysState, month, updateDays} = this.props;\r\n        const targetMonth = daysState\r\n            .filter((day)=>(day['month'] === month));\r\n\r\n        console.log(this.props.daysState, targetMonth)\r\n        if (this.props.month!==prevProps.month){\r\n\r\n\r\n                this.setState(prevState=>({\r\n                    month: month,\r\n                    id: dayIndex,\r\n                    haveComment: prevState.haveComment,\r\n                    editing: false,\r\n                    comment: prevState.comment,\r\n                    modal: false,\r\n                    close: false,\r\n                }));\r\n\r\n\r\n        }\r\n    }\r\n    // shouldComponentUpdate(){\r\n    //     const{dayIndex , daysState, month, updateDays} = this.props;\r\n    //     const targetMonth = daysState\r\n    //         .filter((day)=>(day['month'] === month));\r\n    //\r\n    //\r\n    //     this.setState({})\r\n    // }\r\n    render(){\r\n\r\n\r\n        //console.log(this.props.daysState);\r\n\r\n        return(\r\n         <td id={Math.random()}\r\n\r\n             className={this.setClassToday()}\r\n             onClick={(id)=>{\r\n                 this.toggleModal(id)\r\n             }}\r\n            >\r\n                { !this.state.modal ? this.state.comment? utils.checkDays(this.props)?utils.checkDays(this.props)+ this.state.comment: null : utils.checkDays(this.props):\r\n\r\n                    <Modal isOpen={this.state.modal} toggle={false} className={this.props.className}>\r\n                        <ModalHeader toggle={this.toggle} >Modal title</ModalHeader>\r\n\r\n                            <textarea placeholder={'type something'}\r\n                                      value={this.state.comment}\r\n                                      onChange={event=>this.addComment(event)}\r\n                            >{this.state.comment}\r\n                                        </textarea>\r\n\r\n                        <ModalFooter>\r\n                            <Button  color=\"primary\" onClick={this.saveComment}> Save </Button>{' '}\r\n                            <Button  color=\"secondary\" onClick={this.cancelledComment}> Cancel </Button>\r\n                        </ModalFooter>\r\n                    </Modal>\r\n\r\n                }\r\n          </td>)\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default Day;","import React from 'react';\r\nimport Day from './Day';\r\n\r\nfunction Week({\r\n               countWeek,\r\n               firstDay,\r\n               firstDayNumber,\r\n               dayNames,\r\n               onDayClick,\r\n               daysInMonth,\r\n               today,\r\n               month,\r\n               thisMonth,\r\n              saveDaysState,\r\n              daysState,\r\n              updateDays\r\n}\r\n               ) {\r\n\r\n\r\n    const days = dayNames.map((dayName, index)=>{\r\n        return <Day dayIndex={(index + 1) + (countWeek * 7)}\r\n                    updateDays={updateDays}\r\n                    daysState={daysState}\r\n                    saveDaysState={saveDaysState}\r\n                    thisMonth={thisMonth}\r\n                    month={month}\r\n                    today={today}\r\n                    countWeek={countWeek}\r\n                    dayName={dayName}\r\n                    day={index+1}\r\n                    firstDay={firstDay}\r\n                    firstDayNumber={firstDayNumber}\r\n                    onDayClick = {onDayClick}\r\n                    daysInMonth = {daysInMonth}\r\n                />\r\n    });\r\n\r\n    return <tr>\r\n        {days}\r\n    </tr>\r\n\r\n}\r\n\r\nexport default Week;\r\n","import React from 'react';\nimport Week from './components/Week';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n\n    const now = new Date();\n    this.state = {\n        year: now.getFullYear(),\n        month: now.getMonth(),\n        thisMonth:true,\n        today: new Date(now.getFullYear(), now.getMonth(), now.getDate()),\n        daysState: [],\n        dayNames: [\n            'Monday',\n            'Tuesday',\n            'Wednesday',\n            'Thursday',\n            'Friday',\n            'Saturday',\n            'Sunday',\n       ],\n        monthNames: [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\" ]\n    }\n  }\n\n    updateDays = (currentMonthDays) => {\n      this.setState({daysState: currentMonthDays})\n    };\n\n   saveDaysState =(day)=> {\n       let copyDays = [...this.state.daysState];\n\n       if(!copyDays.some((obj)=>obj['id']===day['id'])){\n           copyDays.push({...day});\n       }\n\n       if(copyDays.some((obj)=>obj['id']===day['id'])) {\n           copyDays.filter((obj)=>obj['id']===day['id'])\n                   .map((obj)=>{\n                    obj['comment'] = {...day}['comment'];\n                    return {...obj};\n                   })\n       }\n\n\n       this.setState({daysState: copyDays})\n   };\n\n   getFirstDayMouth = () =>{\n      const {year, month} = this.state;\n      return new Date(year, month , 1).getDate();\n\n    };\n    getFirstDayNumber = () => {\n       const {year, month} = this.state;\n       return new Date(year, month , 1).getDay();\n   };\n\n    getDaysInMonth = () => {\n        const {year, month} = this.state;\n        return new Date(year, month+1, 0).getDate();\n    };\n\n    createWeek = () => {\n        let   firstDay = this.getFirstDayMouth(), //1\n              firstDayNumber =  this.getFirstDayNumber(), //6\n              daysInMonth = this.getDaysInMonth(); //30\n\n        const mappingEl = [];\n        let countWeek = 0;\n        let week = Math.ceil(daysInMonth/7);\n\n        if(firstDayNumber===0){\n            firstDayNumber = 7;\n        }\n\n        if( (firstDayNumber>6 && daysInMonth>=30) || (firstDayNumber > 3 && this.state.month === 1)){\n            week++;\n        }\n\n        while (week!==countWeek){\n            mappingEl.push(<Week\n                updateDays={this.updateDays}\n                daysState={this.state.daysState}\n                thisMonth={this.state.thisMonth}\n                month = {this.state.month}\n                today = {this.state.today}\n                countWeek = {countWeek}\n                firstDay ={firstDay}\n                firstDayNumber = {firstDayNumber}\n                daysInMonth={daysInMonth}\n                dayNames={this.state.dayNames}\n                onDayClick={this.onDayClick}\n                saveDaysState={this.saveDaysState}\n            />);\n            countWeek++;\n        }\n         return mappingEl.map((component)=>component);\n    };\n\n    onDayClick = (id)=> {\n      console.log(id)\n    };\n\n    render(){\n      return (\n          <div className=\"calendar-app\">\n              <header className=\"App-header\">\n                 <div className={\"calendar-caption\"}>\n\n                     <button\n                        onClick={()=>{\n                            if(this.state.month===0){\n                                return;\n                            }\n                            this.setState({month:this.state.month-1})\n                        }}\n                     >{'<'}</button>\n\n                     <div className={\"calendar-head\"}>\n                          <span>{this.state.year}</span>\n                          <span>{this.state.monthNames[this.state.month]}</span>\n                     </div>\n\n                     <button\n                         onClick={()=>{\n                             if(this.state.month===11){\n                                 return;\n                             }\n                             this.setState({month:this.state.month+1,\n                             })\n                         }}\n                     >{'>'}</button>\n                 </div>\n                  <table className={\"calendar-board\"}>\n                      <tr>\n                          {this.state.dayNames.map((dayName)=><th>{dayName.slice(0, 3)}</th>)}\n                      </tr>\n\n                    { this.createWeek() }\n                </table>\n              </header>\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}