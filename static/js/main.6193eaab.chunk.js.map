{"version":3,"sources":["components/Day.js","components/Week.js","App.js","serviceWorker.js","index.js"],"names":["Day","_ref","onDayClick","_this","today","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleStatus","target","console","log","textContent","setState","prevState","modal","checkToday","_this$props","props","index","firstDayNumber","state","getDate","addComment","event","comment","value","haveComment","saveComment","checkDays","_this$props2","daysInMonth","countWeek","firstDay","count","editing","_this2","react_default","a","createElement","id","Math","random","className","onClick","Modal","isOpen","toggle","ModalHeader","placeholder","onChange","ModalFooter","Button","color","React","Component","Week","dayNames","days","map","dayName","components_Day","day","App","getFirstDayMouth","_this$state","year","month","Date","getFirstDayNumber","_this$state2","getDay","getDaysInMonth","_this$state3","createWeek","mappingEl","week","ceil","push","components_Week","component","now","getFullYear","getMonth","monthNames","slice","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6193eaab.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nclass Day extends React.Component {\r\n\r\n    constructor({onDayClick,\r\n                    today}) {\r\n        super();\r\n        this.state={\r\n            today: today,\r\n            haveComment:false,\r\n            editing: false,\r\n            comment: null,\r\n            modal: false,\r\n        };\r\n    }\r\n\r\n    toggleStatus = (target)=> {\r\n        if(target){\r\n            console.log(target.textContent)\r\n        }\r\n        this.setState(prevState => ({\r\n            modal: !prevState.modal\r\n        }));\r\n\r\n        // if(!this.state.editing){\r\n        //     this.setState({editing: true});\r\n        // }\r\n        // else this.setState({editing: false});\r\n    };\r\n\r\n\r\n    checkToday = ()=> {\r\n        let {index, firstDayNumber,} = this.props;\r\n        if(this.state.today.getDate()===index-firstDayNumber+1){\r\n            return \"today\";\r\n        }\r\n    };\r\n\r\n    addComment = (event) => {\r\n            this.setState({\r\n               comment: event.target.value\r\n            });\r\n\r\n        if(event.target.value===''){\r\n            this.setState({\r\n                comment: null,\r\n                haveComment: false\r\n            })\r\n\r\n    }};\r\n\r\n    saveComment = ()=> {\r\n        this.setState({\r\n            haveComment: true\r\n        });\r\n        this.toggleStatus();\r\n    };\r\n\r\n\r\n\r\n     checkDays = ()=> {\r\n\r\n       let {index, daysInMonth, firstDayNumber, countWeek, firstDay} = this.props;\r\n            let count = 0;\r\n\r\n        if(index>daysInMonth+firstDayNumber-1){\r\n            return null;\r\n        }\r\n        if(countWeek===0 && index===firstDayNumber){\r\n\r\n           return index = firstDay;\r\n\r\n        }\r\n\r\n        if(countWeek===0 && index>firstDayNumber){\r\n            count++;\r\n            return ()=>{\r\n                return count;\r\n            }\r\n        }\r\n\r\n        if(countWeek!==0){\r\n            index ++;\r\n            return index-firstDayNumber;\r\n        }\r\n\r\n    };\r\n\r\n    render(){\r\n        // const randomstring = require(\"randomstring\"),\r\n        //       id = randomstring.generate(4);\r\n\r\n        console.log(this.state)\r\n\r\n        return(\r\n         <td id={Math.random()}\r\n             className={this.checkToday()}\r\n             onClick={(event)=>{\r\n                 this.toggleStatus(event.target)\r\n             }}\r\n            >\r\n\r\n                { !this.state.modal ? this.state.comment? this.checkDays()?this.checkDays() + this.state.comment: null : this.checkDays():\r\n\r\n                    <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n                        <ModalHeader toggle={this.toggle} >Modal title</ModalHeader>\r\n\r\n                            <textarea placeholder={'type something'}\r\n                                      value={this.state.comment}\r\n                                      onChange={(event)=>{this.addComment(event)}}\r\n                            >{this.state.comment}\r\n                                        </textarea>\r\n\r\n                        <ModalFooter>\r\n                            <Button  color=\"primary\" onClick={()=>{this.saveComment()}}>Save</Button>{' '}\r\n                            <Button  color=\"secondary\" onClick={(event)=>this.toggleStatus(event.target)}>Cancel</Button>\r\n                        </ModalFooter>\r\n                    </Modal>\r\n\r\n                }\r\n          </td>)\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default Day;","import React from 'react';\r\nimport Day from './Day';\r\n\r\n\r\nfunction Week({\r\n               countWeek,\r\n               firstDay,\r\n               firstDayNumber,\r\n               dayNames,\r\n               onDayClick,\r\n               daysInMonth,\r\n               today}\r\n               ) {\r\n\r\n\r\n    const days = dayNames.map((dayName, index)=>{\r\n        return <Day index={(index + 1) + (countWeek * 7)}\r\n                    today={today}\r\n                    countWeek={countWeek}\r\n                    dayName={dayName}\r\n                    day={index+1}\r\n                    firstDay={firstDay}\r\n                    firstDayNumber={firstDayNumber}\r\n                    onDayClick = {onDayClick}\r\n                    daysInMonth = {daysInMonth}\r\n                />\r\n    });\r\n\r\n    return <tr>\r\n        {days}\r\n    </tr>\r\n\r\n}\r\n\r\nexport default Week;\r\n","import React from 'react';\nimport Week from './components/Week';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n\n    const now = new Date();\n    this.state = {\n        year: now.getFullYear(),\n        month: now.getMonth(),\n        today: new Date(now.getFullYear(), now.getMonth(), now.getDate()),\n        dayNames: [\n            'Monday',\n            'Tuesday',\n            'Wednesday',\n            'Thursday',\n            'Friday',\n            'Saturday',\n            'Sunday',\n       ],\n        monthNames: [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\" ]\n    }\n  }\n\n   getFirstDayMouth = () =>{\n      const {year, month} = this.state;\n      return new Date(year, month , 1).getDate();\n\n    };\n    getFirstDayNumber = () => {\n       const {year, month} = this.state;\n       return new Date(year, month , 1).getDay();\n   };\n\n    getDaysInMonth = () => {\n        const {year, month} = this.state;\n        return new Date(year, month+1, 0).getDate();\n    };\n\n    createWeek = () => {\n        const firstDay = this.getFirstDayMouth(), //1\n              firstDayNumber =  this.getFirstDayNumber(), //6\n              daysInMonth = this.getDaysInMonth(); //30\n\n        const mappingEl = [];\n        let countWeek = 0;\n        let week = Math.ceil(daysInMonth/7);\n\n        if(firstDayNumber>4 && daysInMonth<30){\n            week++;\n        }\n\n        while (week!==countWeek){\n            mappingEl.push(<Week\n                today = {this.state.today}\n                countWeek = {countWeek}\n                firstDay ={firstDay}\n                firstDayNumber = {firstDayNumber}\n                daysInMonth={daysInMonth}\n                dayNames={this.state.dayNames}\n                onDayClick={this.onDayClick}\n            />);\n            countWeek++;\n        }\n         return mappingEl.map((component)=>component);\n    };\n\n    onDayClick = (id)=> {\n      console.log(id)\n    };\n\n    render(){\n      return (\n          <div className=\"calendar-app\">\n              <header className=\"App-header\">\n                 <div className={\"calendar-caption\"}>\n\n                     <button\n                        onClick={()=>{\n                            if(this.state.month===0){\n                                return;\n                            }\n                            this.setState({month:this.state.month-1})\n                        }}\n                     >{'<'}</button>\n\n                     <div className={\"calendar-head\"}>\n                          <span>{this.state.year}</span>\n                          <span>{this.state.monthNames[this.state.month]}</span>\n                     </div>\n\n                     <button\n                         onClick={()=>{\n                             if(this.state.month===11){\n                                 return;\n                             }\n                             this.setState({month:this.state.month+1})\n                         }}\n                     >{'>'}</button>\n                 </div>\n                  <table className={\"calendar-board\"}>\n                      <tr>\n                          {this.state.dayNames.map((dayName)=><th>{dayName.slice(0, 3)}</th>)}\n                      </tr>\n\n                    { this.createWeek() }\n                </table>\n              </header>\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}